"" DEBUG
""set verbose

source $HOME/.vim/config-common
source $HOME/.vim/config-textmate-like
source $HOME/.vim/config-comment-inout
source $HOME/.vim/bclose.vim
"source $HOME/.vim/minimap.vim
source $HOME/.vim/config-thet-plugins

colorscheme molokai
""colorscheme peaksea
""colorscheme wombat

"" GUI
if has('gui_running')
    set antialias
    " Remove all the UI cruft
    set go-=T
    set go-=l
    set go-=L
    set go-=r
    set go-=R
    set go-=M
    set go-=m
    highlight SpellBad term=underline gui=undercurl guisp=Red
    set fillchars+=vert:â”‚ " Use a line-drawing char for pretty vertical splits.
    set guicursor+=a:blinkon0 " Disable all blinking
    set guifont=Ubuntu\ Mono\ 12
endif

set showmatch " indicate open/closing brackets
set ttyfast
set nowrap
set colorcolumn=79

"" bufstop for xml based files
autocmd BufRead,BufNewFile *.html,*.pt,*.xml,*.zcml setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd BufRead,BufNewFile *.js,*.css setlocal tabstop=4 shiftwidth=4 softtabstop=4

"" allow dot to enter command mode from normal mode
noremap ; :
"" allow ctrl-backspace to generate escape key sequence
inoremap <C-BS> <Esc>
command W execute "w"

"" delete into blackhole register, so that other aren't overwritten
"" thanks bairu from #vim!
nnoremap <Del> "_x

nmap <F5> :set nosmarttab<CR>
"":setlocal si! si?<CR>
""set noautoindent
""set nocindent
""set nosmarttab

set foldlevelstart=20 " set foldlevel higher so opened buffers arent folded
"" open/close all folds
""nmap <C-TAB> za
""nmap <C-S-TAB> zA
nmap <C-S-Right> zo
nmap <C-S-Left> zc
"" termit might override usage of -A-
nmap <C-S-A-Right> zO
nmap <C-S-A-Left> zC

" toggle list
set nolist
nnoremap <leader>p :set list!<CR> 

"" wrap text
nnoremap <leader>w gqip

"" remap
set spelllang=de,en
map <silent> <leader>r :set spell!<CR>
nmap <leader>s :call Preserve("%s/\\s\\+$//e")<CR>

"" MULTIPAGE
"" see: http://stackoverflow.com/questions/6873076/auto-scrollable-pagination-with-vim-using-vertical-split
nmap <silent> <Leader>ef :vsplit<bar>wincmd l<bar>exe "norm! Ljz<c-v><cr>"<cr>:set scb<cr>:wincmd h<cr> :set scb<cr>

"" center scrolling
map <S-Up> <Up>zz
map <S-Down> <Down>zz
" scoll lock toggle
map <leader>zz :let &scrolloff=999-&scrolloff<cr>
" center search
nmap n nzz
nmap N Nzz

" select all
nmap <C-a> ggVG

"" next/previous buffer
nmap <silent> <C-left> :bprev<CR>
nmap <silent> <C-right> :bnext<CR>
"" close buffer and goto next. works with TabBar
""nmap <C-x> :bd<CR>:bnext<CR>
"" Bclose script doesn't delete windows. Annoyance Free.
nmap <C-x> :Bclose<CR>

"nmap <leader>t :tabnew
nmap <C-n> :tab split<CR>
nmap <C-c> :tabclose<CR>
nmap <C-Up> :tabn<CR>
nmap <C-Down> :tabp<CR>

"""" CLIPBOARD
"" default copy/paste
nmap 1 "ay
nmap 11 "ayy
nmap 2 "ap
"" copy/paste paste to/from clipboard
map <C-S-Y> "+yy
map <C-S-P> "+P
"" set clipboard=unnamed
"" set clipboard=unnamedplus

"""" PLUGINS

"" fontsize
nmap <silent> <leader>9 <Plug>FontsizeBegin
nmap <silent> <leader>= <Plug>FontsizeInc
nmap <silent> <leader>- <Plug>FontsizeDec
nmap <silent> <leader>0 <Plug>FontsizeDefault

"" open bash in vertical split
nnoremap <leader>k :lcd %:p:h<CR>:ConqueTermSplit bash<CR>

"" lusty
nnoremap <leader>, :LustyJuggler<CR>
nnoremap <leader>/ :LustyFilesystemExplorer<CR>
nnoremap <leader>. :LustyFilesystemExplorerFromHere<CR>
"" buffergator
nnoremap <leader>m :BuffergatorToggle<CR>

"" Tagbar
nnoremap tt :TagbarToggle<CR>

"" Fuzzy Finder
nmap <LEADER>f :FufFile<SPACE>**/<CR>
nmap <LEADER>F :FufRenewCache<CR>
"nmap <leader>t :FufCoverageFile<Space>
"nmap <leader>ft :FufTag<Space>

"" TaskList
nmap <F11> :TaskList<CR>

"" NERDTree
noremap <silent> <f9> :NERDTreeToggle<CR>

"" quit fast
"nmap :qq<CR> :qall<CR>

"" move lines and blocks
"" see http://vim.wikia.com/wiki/Moving_lines_up_or_down
"nnoremap <C-Up> :m+<CR>==
"nnoremap <C-Down> :m-2<CR>==
"inoremap <C-Up> <Esc>:m+<CR>==gi
"inoremap <C-Down> <Esc>:m-2<CR>==gi
"vnoremap <C-Up> :m'>+<CR>gv=gv
"vnoremap <C-Down> :m-2<CR>gv=gv

"" autocomplpopup bug
"autocmd BufRead,BufNewFile *.tex,*.txt,*.rst setlocal tw=79 fo=aw2tq
"autocmd BufRead,BufNewFile *.py setlocal tw=79 fo=aw2cq

" Use ranger as vim file manager
" http://ornicar.github.com/2011/02/12/ranger-as-vim-file-manager.html
function! Ranger()
    " Get a temp file name without creating it
    let tmpfile = substitute(system('mktemp -u'), '\n', '', '')
    " Launch ranger, passing it the temp file name
    silent exec '!RANGER_RETURN_FILE='.tmpfile.' ra'
    " If the temp file has been written by ranger
    if filereadable(tmpfile)
        " Get the selected file name from the temp file
        let filetoedit = system('cat '.tmpfile)
        exec 'edit '.filetoedit
        call delete(tmpfile)
    endif
    redraw!
endfunction
nmap <leader>q :call Ranger()<cr>

"function! Ranger2()
"    let tmp = /tmp/chosen
"    silent !ra %:h --choosefile=/tmp/chosen 
"    if filereadable(tmp)
"        let filetoedit = system('cat '.tmp)
"        exec 'edit '.filetoedit
"        call delete(tmp)
"    endif
"    redraw!
"endfunction
"nmap <leader>q :call Ranger2()<cr>


"" split windows
"" http://techdebug.com/blog/2008/05/22/vim-split-tips/
" Max/unmax splits
nnoremap <c-W>o :call MaximizeToggle()<cr>
"nnoremap <c-W>O :call MaximizeToggle()<cr>
"nnoremap <c-W><c-O> :call MaximizeToggle()<cr>
function! MaximizeToggle()
  if exists("s:maximize_session")
    exec "source " . s:maximize_session
    call delete(s:maximize_session)
    unlet s:maximize_session
    let &hidden=s:maximize_hidden_save
    unlet s:maximize_hidden_save
  else
    let s:maximize_hidden_save = &hidden
    let s:maximize_session = tempname()
    set hidden
    exec "mksession! " . s:maximize_session
    only
  endif
endfunction
"nnoremap <C-w>a :call WindowToggle()<CR>
"function! WindowToggle()
"    "" toggle
"    let s:toggle_split = exists('s:toggle_split') ? !s:toggle_split : 1
"    if s:toggle_split
"        "" <C-w>w<CR>
"        echo 'implement me 1'
"    else
"        "" <C-p>p<CR>
"        echo 'imeplement me 2'
"    endif
"endfunction


"" vim:ft=vim
