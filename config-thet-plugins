
source $HOME/.vim/config-vam

" CodeOverview
" L9
" Markdown
" Scratch
" TabBar
" Tabular
" Wombat
" YankRing
" ack
" delimitMate
" flake8
" git-vim
" javaScriptLint
" python%790
" showmarks
" sparkup
" supertab
" taglist
" tslime
" unimpaired
" utl
" vim-less
" vimroom: http://projects.mikewest.org/vimroom/
"            \ 'lint', 

call ActivateAddons([
    \ 'AutoComplPop',
    \ 'Buffergator',
    \ 'EasyGrep',
    \ 'FuzzyFinder',
    \ 'Powerline',
    \ 'Tagbar',
    \ 'TaskList',
    \ 'The_NERD_tree',
    \ 'Conque_Shell',
    \ 'css_color@skammer',
    \ 'delimitMate',
    \ 'fontsize',
    \ 'fugitive',
    \ 'html5',
    \ 'jQuery',
    \ 'lusty',
    \ 'molokai',
    \ 'pep83160',
    \ 'pyflakes2441',
    \ 'scratch',
    \ 'snipmate',
    \ 'snipmate-snippets',
    \ 'Syntastic',
    \ 'vimroom',
    \ 'VOoM',
    \ ])


let g:syntastic_check_on_open=1
let g:syntastic_auto_jump=0
let g:syntastic_stl_format = '[%E{%e Errors}%B{, }%W{%w Warnings}]'

"" buffergator
let g:buffergator_viewport_split_policy = 'L'
let g:buffergator_sort_regime = 'filepath'
let g:buffergator_display_regime = 'basename'
let g:buffergator_split_size = 40
let g:buffergator_autodismiss_on_select = 1
let g:buffergator_suppress_keymaps = 1


"" Powerline
let g:Powerline_symbols = 'fancy'


"" Tagbar
" ZCML type
let g:tagbar_type_zcml = {
    \ 'ctagstype': 'zcml',
    \ 'kinds': [
        \ 'n:name',
        \ 'g:profile',
        \ 'p:permission',
        \ 'h:handler',
        \ 'm:component',
        \ 'f:factory',
        \ 'c:class',
        \ 'i:id',
        \ 's:schema'
    \ ]
\}
" cfg file type
let g:tagbar_type_cfg = {
    \ 'ctagstype': 'ini',
    \ 'kinds': ['s:section']
\ }
" Markdown type
let g:tagbar_type_markdown = {
    \ 'ctagstype': 'markdown',
    \ 'kinds': ['h:header']
\ }


"" Fuzzy Finder
" max results, lot o' files in a buildout :)
let g:fuzzy_ceiling=35000
" show full paths
let g:fuzzy_path_display = 'highlighted_path'
" ignored files
let g:fuzzy_ignore = "*.png;*.PNG;*.pyc;*.pyo;*.JPG;*.jpg;*.GIF;*.gif;.svn/**;.git/**;*.mo;.DS_Store;.AppleDouble"
" available modes
let g:FuzzyFinderOptions = {
    \'File': {'mode_available': 1},
    \'Buffer': {'mode_available': 0},
    \'Dir': {'mode_available': 0},
    \'MruFile': {'mode_available': 0},
    \'MruCmd': {'mode_available': 0},
    \'Bookmark': {'mode_available': 0},
    \}
" Don't delete a full path when using backspace in file mode
let g:FuzzyFinderOptions.File.smart_bs = 0


"" EASYGREP
let g:EasyGrepMode=1
let g:EasyGrepCommand=0
let g:EasyGrepRecursive=0
let g:EasyGrepIgnoreCase=1
let g:EasyGrepHidden=0
let g:EasyGrepAllOptionsInExplorer=1
let g:EasyGrepWindow=1
let g:EasyGrepReplaceWindowMode=0
let g:EasyGrepOpenWindowOnMatch=1
let g:EasyGrepEveryMatch=0
let g:EasyGrepJumpToMatch=1
let g:EasyGrepInvertWholeWord=0
let g:EasyGrepFileAssociationsInExplorer=0
let g:EasyGrepOptionPrefix='<leader>vy'
let g:EasyGrepReplaceAllPerFile=0


"""" NERDTree
noremap <silent> <f9> :NERDTreeToggle<CR>
""noremap <silent> <f8> :NERDTreeFromBookmark<Space>
""noremap <silent> <f7> :NERDTreeFind<CR>
let g:NERDTreeIgnore=['\~$', '\.svn$', '\.git*$', '\.pyc$', '\.pyo$', '\.mo$']
""" set the sort order to alphabetical
let g:NERDTreeSortOrder=[]
""" when the root is changed, change Vim's working dir
""let NERDTreeChDirMode=2
let g:NERDTreeChDirMode=0
let g:NERDTreeHighlightCursorline=1
let g:NERDTreeHijackNetrw=0
let g:NERDTreeMouseMode=2
let g:NERDTreeMinimalUI=1
let g:NERDTreeWinSize=31


"" Conque_Shell
let g:ConqueTerm_FastMode = 0
let g:ConqueTerm_Color = 1
let g:ConqueTerm_CloseOnEnd = 1


"" autocomplpopup
""fun! GetSnipsInCurrentScope()
""    let snips = {}
""    for scope in [bufnr('%')] + split(&ft, '\.') + ['_']
""        call extend(snips, get(s:snippets, scope, {}), 'keep')
""        call extend(snips, get(s:multi_snips, scope, {}), 'keep')
""    endfor
""    return snips
""endf
""let g:acp_behaviorSnipmateLength=1

"" autocomplete behavior
"" http://vim.wikia.com/wiki/Improve_completion_popup_menu
""inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"
""inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
""inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
""inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
""inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
""inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"


"" vim:ft=vim
